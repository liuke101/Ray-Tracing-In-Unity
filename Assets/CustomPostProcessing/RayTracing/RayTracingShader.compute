#pragma kernel RayTracing

RWTexture2D<float4> Result;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

//随机产生射线的像素偏移
float2 _PixelOffset;

//射线
struct Ray
{
    float3 origin; //原点
    float3 direction; //方向
    float3 energy; //能量
};

//创建射线
Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

//创建相机的射线
Ray CreateCameraRay(float2 uv)
{
    //相机原点转换到世界空间
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    //屏幕空间坐标转换到观察空间
    float3 projectivePoint = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    //得到射线方向向量：相机原点指向观察空间位置
    float3 rayDirection = projectivePoint - float3(0, 0, 0).xyz;
    //将方向向量转换到世界空间并归一化
    rayDirection = mul(_CameraToWorld, float4(rayDirection, 0.0f)).xyz;
    rayDirection = normalize(rayDirection);

    return CreateRay(origin, rayDirection);
}

//存储交点参数
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    //默认距离为无限大
    hit.distance = 1e30f; //地平面距离视为无限远
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//地平面相交
//默认情况下，参数是按值传递的，而不是按引用传递，若要修改参数，需要使用inout关键字
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    //计算光线原点到地平面的距离
    //在世界空间中，地平面的 y 值是负的。我们向地面发射射线，所以ray.direction.y为负，我们添加一个负号让其为正数。
    float t = -ray.origin.y / ray.direction.y;
    //当向天空发射射线时，t为负数
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + ray.direction * t;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

//球体相交
//球体被定义为一个包含位置（xyz）和半径（w）的float4
void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    //球心到光线原点的向量
    float3 d = ray.origin - sphere.xyz;

    float p1 = -dot(ray.direction, d);

    float p2Sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if (p2Sqr < 0)
        return;

    float p2 = sqrt(p2Sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

//光线追踪，获得交点参数
RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    //IntersectGroundPlane(ray, bestHit);
    //此处添加球体
    IntersectSphere(ray, bestHit, float4(0.0f, 0.0f, 0.0f, 1.0f));
    IntersectSphere(ray, bestHit, float4(0.0f, 5.0f, 0.0f, 1.0f));
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    //如果击中几何体，计算反射光线
    if (hit.distance < 1e30f)
    {
        float3 specular = float3(0.6f, 0.6f, 0.6f); //反射率
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;
        // Return nothing
        return float3(0.0f, 0.0f, 0.0f);
    }
    //如果没有击中几何体，采样天空盒
    else
    {
        //消除光线的能量，因为天空不会反射光线
        ray.energy = 0.0f;
        //采样天空盒
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

//每个线程组有64个线程，每个线程处理一个像素
[numthreads(8,8,1)]
void RayTracing(uint3 id : SV_DispatchThreadID)
{
    uint width, height; //RT的宽高
    Result.GetDimensions(width, height); //获取RWTexture2D纹理宽高

    //计算uv
    //uv的范围转换到是[-1,1]
    float2 uv = float2(((id.xy + _PixelOffset) + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    float2 uv2 = (id.xy / float2(width, height)) * 0.5f + 0.5f;

    Ray ray = CreateCameraRay(uv);

    //光线追踪+着色
    float3 result = float3(0, 0, 0);
    //弹射7次
    for (int i = 0; i < 8; i++)
    {
        RayHit Hit = Trace(ray);
        result += ray.energy * Shade(ray, Hit);

        //ray.energy为0时，跳出循环
        if(!any(ray.energy))
            break;
    }
    Result[id.xy] = float4(result, 1.0f);
}
